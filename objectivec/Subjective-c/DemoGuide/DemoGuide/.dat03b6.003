/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

/*
This file was autogenerated with SubjectiveParser 2.0.
Base file: /Users/guillaumekaisin/Dropbox/Mémoire/code/tests/DemoGuide/DemoGuide/ContextsViewController.m.
*/

//
//  ContextsViewController.m
//  DemoGuide
//
//  Created by Kim Mens on 13/11/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "ContextsViewController.h"

@implementation ContextsViewController
@synthesize contextNames, sectionNames;

- (id)initWithStyle:(UITableViewStyle)style
{
    self = [super initWithStyle:style];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

- (void)viewDidLoad
{
    NSArray * languages = [[NSArray alloc] initWithObjects:@"French",@"English",@"Dutch",nil];
    NSArray * timeAdaptation = [[NSArray alloc] initWithObjects:@"TimeAdaptation", nil];
    NSArray * timeOfDay = [[NSArray alloc] initWithObjects:@"Morning", @"Afternoon", @"Evening", nil];

    
    contextNames = [[NSArray alloc] initWithObjects: languages, timeAdaptation, timeOfDay, nil];
    sectionNames = [[NSArray alloc] initWithObjects: @"Language", @"Time adaptation", @"Time detection",nil];
    
    [languages release];
    
    [super viewDidLoad];
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.tableView reloadData];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

#pragma mark - Table view data source

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
	
	return [self.sectionNames objectAtIndex:section];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    // Return the number of sections.
    return [sectionNames count];
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{    // Return the number of rows in the section.
    return [[self.contextNames objectAtIndex:section] count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"Cell";
    NSString * contextName = [[self.contextNames objectAtIndex:indexPath.section] objectAtIndex:indexPath.row];
    SCContext * context = [[SCContextManager sharedContextManager]
                           contextWithName:contextName];
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] autorelease];
    }
    
    // Configure the cell...
    cell.textLabel.text = contextName;
    cell.selectionStyle = UITableViewCellEditingStyleNone;
    
    UIImageView *imageView;
    if(context.isActive){
        imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"active.png"]];
    }
    else imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"inactive.png"]];
    cell.accessoryView = imageView;
    [imageView release];
    return cell;
}

/*
// Override to support conditional editing of the table view.
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
*/

/*
// Override to support editing the table view.
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the row from the data source
        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
    }   
    else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }   
}
*/

/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath
{
}
*/

/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/

#pragma mark - Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Navigation logic may go here. Create and push another view controller.
    /*
     <#DetailViewController#> *detailViewController = [[<#DetailViewController#> alloc] initWithNibName:@"<#Nib name#>" bundle:nil];
     // ...
     // Pass the selected object to the new view controller.
     [self.navigationController pushViewController:detailViewController animated:YES];
     [detailViewController release];
     */
}

@end
